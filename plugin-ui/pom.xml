<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.github.kchobantonov</groupId>
    <artifactId>camunda-jsonforms-plugin-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>

  <artifactId>plugin-ui</artifactId>
  <packaging>pom</packaging>
  <name>Camunda JsonForms Plugin UI</name>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.10</version>
        <executions>
          <execution>
            <id>lernaBeforeVersion</id>
            <goals>
              <goal>bsh-property</goal>
            </goals>
            <configuration>
              <properties>
                <property>lerna.deployVersion</property>
              </properties>
              <source>lerna.deployVersion = project.getVersion().endsWith("-SNAPSHOT") ?
                project.getVersion() + "." + System.currentTimeMillis() : project.getVersion();</source>
            </configuration>
          </execution>
          <execution>
            <id>pnpm.publish.args</id>
            <goals>
              <goal>bsh-property</goal>
            </goals>
            <configuration>
              <properties>
                <property>pnpm.publish.args</property>
              </properties>
              <source>pnpm.publish.args = project.getVersion().endsWith("-SNAPSHOT") ?
                "--tag snapshot --no-git-checks": ""</source>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>${frontend-maven-plugin.version}</version>
        <configuration>
          <nodeVersion>${node.version}</nodeVersion>
          <pnpmVersion>${pnpm.version}</pnpmVersion>
          <workingDirectory>${frontend.working.directory}</workingDirectory>
        </configuration>
        <executions>

          <execution>
            <id>install node and pnpm</id>
            <goals>
              <goal>install-node-and-pnpm</goal>
            </goals>
            <phase>initialize</phase>
          </execution>
          <execution>
            <id>pnpm install</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <!-- Optional configuration which provides for running any npm command -->
            <configuration>
              <arguments>i --frozen-lockfile</arguments>
            </configuration>
          </execution>

          <execution>
            <id>sync version to lerna</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <configuration>
              <arguments>exec -- lerna version ${project.version} --exact --no-git-tag-version
                --no-push --force-publish="*" --yes</arguments>
            </configuration>
            <phase>generate-resources</phase>
          </execution>

          <execution>
            <id>install node and pnpm - clean</id>
            <goals>
              <goal>install-node-and-pnpm</goal>
            </goals>
            <phase>clean</phase>
          </execution>
          <execution>
            <id>pnpm install - clean</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <!-- Optional configuration which provides for running any npm command -->
            <configuration>
              <arguments>i --frozen-lockfile</arguments>
            </configuration>
            <phase>clean</phase>
          </execution>
          <execution>
            <id>pnpm clean</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <configuration>
              <arguments>run clean</arguments>
            </configuration>
            <phase>clean</phase>
          </execution>

          <execution>
            <id>pnpm run build</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
          </execution>

          <execution>
            <id>pnpm pre-publish</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <configuration>
              <arguments>exec -- lerna version ${lerna.deployVersion} --exact --no-git-tag-version
                --no-push --force-publish="*" --yes</arguments>
            </configuration>
            <phase>deploy</phase>
          </execution>
          <execution>
            <id>pnpm publish</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <configuration>
              <arguments>run publish ${pnpm.publish.args}</arguments>
            </configuration>
            <phase>deploy</phase>
          </execution>
          <execution>
            <id>pnpm post-publish</id>
            <goals>
              <goal>pnpm</goal>
            </goals>
            <configuration>
              <arguments>exec -- lerna version ${project.version} --exact --no-git-tag-version
                --no-push --force-publish="*" --yes</arguments>
            </configuration>
            <phase>deploy</phase>
          </execution>

        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>prepare-release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <version>${frontend-maven-plugin.version}</version>
            <configuration>
              <nodeVersion>${node.version}</nodeVersion>
              <pnpmVersion>${pnpm.version}</pnpmVersion>
              <workingDirectory>${frontend.working.directory}</workingDirectory>
            </configuration>
            <executions>
              <execution>
                <id>install node and pnpm</id>
                <goals>
                  <goal>install-node-and-pnpm</goal>
                </goals>
                <phase>validate</phase>
              </execution>
              <execution>
                <id>pnpm install</id>
                <goals>
                  <goal>pnpm</goal>
                </goals>
                <configuration>
                  <arguments>i --frozen-lockfile</arguments>
                </configuration>
                <phase>validate</phase>
              </execution>
              <execution>
                <id>prepare-release - sync version to lerna</id>
                <goals>
                  <goal>pnpm</goal>
                </goals>
                <configuration>
                  <arguments>exec -- lerna version ${project.version} --exact --no-git-tag-version --no-push --force-publish="*" --yes</arguments>
                </configuration>
                <phase>validate</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-scm-plugin</artifactId>
            <version>2.0.1</version>
            <executions>
              <execution>
                <id>package.json</id>
                <phase>validate</phase>
                <goals>
                  <goal>add</goal>
                </goals>
                <configuration>
                  <includes>**/package.json,pnpm-lock.yaml,lerna.json</includes>
                  <excludes>**/node/**,**/node_modules/**</excludes>
                  <message>[maven-release-plugin] prepare version for package.json</message>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>